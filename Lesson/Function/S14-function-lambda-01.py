# 람다(lambda)
# inline 함수, 익명함수
# 함수명 생략, return 키워드 생략
# 하나의 라인에 간결하게 표현하는 함수
# 함수형 프로그래밍
############################################
# 선언: 함수변수 = lambda 파라미터 : 표현식
# 호출: 함수변수(파라미터)
# 리턴: 표현식이 리턴
############################################
# 장점: 
#   - 함수정의가 필요하다. (선언이 정의를 포함)
#   - 익명함수 형태로 해서 일회성으로 처리할 때 간결하다.
#   - 함수형 프로그래밍 기법을 적용할 수 있다.

#%%
# 일반함수
def add(a,b):
    return a+b

print(f"일반함수: add(10,20) -> ", add(10,20))

#%%
# 람다식 함수
# 호출은 일반함수 같은 형식이다.
lambda_add = lambda a,b:a+b # : <- 표현식이 리턴값임
print(f"람다함수: add(10,20) -> ", lambda_add(10,20))
print(f"람다함수: add(90,10) -> ", lambda_add(90,10))

#%%
# 1회성 처리
print("람다함수: 10 * 20 -> ", (lambda a,b : a*b)(10,20))






